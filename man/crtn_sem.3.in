.TH CRTN 3  "FEBRUARY 2021" "API v@CRTN_VERSION@" "API v@CRTN_VERSION@"
.SH NAME
crtn_sem \- Semaphore API of the CoRouTiNe service
.SH SYNOPSIS
.nf
\fB#include <crtn.h>\fP
.sp

.PP
.BI "int crtn_sem_new(crtn_sem_t *" sem ", unsigned int " initval ");"
.BI "int crtn_sem_delete(crtn_sem_t " sem ");"

.PP
.BI "int crtn_sem_v(crtn_sem_t " sem ");"
.BI "int crtn_sem_p(crtn_sem_t " sem ");"

.fi
.SH DESCRIPTION

The
.B CRTN_SEM
API is a set of services to manage the semaphores for the coroutines. One may
wonder why semaphores are needed in an environment running coroutines as the
user has complete control on the scheduling and the coroutines do not run in
parallel (no preemption). But as it is possible to have standalone coroutines
which may be resumed each time any coroutine calls
.BR crtn_yield (3),
it may be useful to protect some critical sections of code.

.PP
The
.BR crtn_sem_new ()
function creates a new semaphore initialized with
.IR initval .
The semaphore identifier is returned in
.IR sem .

.PP
The
.BR crtn_sem_delete ()
function deletes the semaphore identified by
.IR sem .

.PP
The
.BR crtn_sem_v ()
function increments the semaphore identified by
.IR sem .

.PP
The
.BR crtn_sem_p ()
function decrements the semaphore identified by
.IR sem .


.SH RETURN VALUE

All the services return 0 on success; on error, \-1 is returned, and
.I errno
is set to indicate the error.

.SH ERRORS
The functions may set
.B errno
with the following values:
.TP
.B EINVAL
Invalid parameter
.TP
.B EAGAIN
No more contexts to create a semaphore

.SH EXAMPLES

The following example runs a home made "wc" tool to count the lines, words, characters and spaces from the its standard input. The main coroutines reads the input and write de characters in a buffer from which three coroutines respectively read and counts the lines, words and spaces. The characters are implicitly counted while reading the buffer. All the coroutines are standalone. A binary semaphore is used to synchronize the coroutine in order to get exclusive access to the buffer while reading a words, newlines and spaces.

.nf
#include <errno.h>
#include <stdio.h>
#include <ctype.h>
#include <assert.h>
#include <sys/select.h>
#include <unistd.h>

#include <crtn.h>

static int w_offset, r_offset;

#define BUFFER_SIZE 128
static char buffer[BUFFER_SIZE];

struct counter_t
{
  size_t nb_chars;
  size_t nb_spaces;
  size_t nb_words;
  size_t nb_lines;
};

struct counter_t cnts;



//----------------------------------------------------------------------------
// Name        : nb_read
// Description : Non blocking read
// Return      : Number of read bytes if OK
//               -1, if error
//----------------------------------------------------------------------------
int nb_read(int fd, char *buf, size_t bufsz)
{
int             rc;
fd_set          fdset;
int             nfds = fd + 1;
struct timeval  to;

  to.tv_sec  = 0;
  to.tv_usec = 0;

  while(1) {
    FD_ZERO(&fdset);
    FD_SET(fd, &fdset);

    rc = select(nfds, &fdset, NULL, NULL, &to);
    switch (rc) {

      // Error
      case -1 : {
        // Interrupted system call ?
        if (EINTR == errno) {
          to.tv_sec  = 0;
          to.tv_usec = 0;
        } else {
          return -1;
        }
      }
      break;

      // Timeout
      case 0: {
        // No data ==> Retry with a timeout 5 ms
        to.tv_usec = 5000;
      }
      break;

      // Incoming data
      default : {
        rc = read(fd, buf, bufsz);
        if (rc < 0) {
          return -1;
        }

        if (0 == rc) {
          buf[0] = EOF;
          return 1;
        }

        return rc;
      }
      break;
    } // End switch
  } // End while
} // nb_read

static int read_buffer(void)
{
  if (r_offset == w_offset) {
    crtn_yield(0);
  }

  cnts.nb_chars ++;
  return buffer[r_offset ++];
} // read_buffer

#define unread_buffer(c) do {           \
                  assert(r_offset > 0); \
                  -- r_offset;          \
                  cnts.nb_chars --;     \
                } while(0)

static void fill_buffer(void)
{
  do {

    // Upon EOF, nb_read() returns 1 with EOF in buffer[0]
    w_offset = nb_read(0, buffer, BUFFER_SIZE - 1);

    // If no error, there is at least an EOF in the buffer
    if (w_offset > 0) {
      buffer[w_offset] = 0;
      r_offset = 0;
      while (r_offset != w_offset && buffer[w_offset-1] != EOF) {
        crtn_yield(0);
      }
    }

  } while (w_offset > 0 && buffer[w_offset-1] != EOF);

} // fill_buffer


static int get_spaces(void *p)
{
  int c;
  crtn_sem_t sem = *((crtn_sem_t *)p);
  int rc;

  do {

    rc = crtn_sem_p(sem);
    if (rc != 0) {
      fprintf(stderr, "crtn_sem_p(): error %d\n", crtn_errno());
      return -1;
    }

    c = read_buffer();
    while(isspace(c) && (c != '\n') && (c != EOF)) {
      cnts.nb_spaces ++;
      c = read_buffer();
    }
    unread_buffer(c);

    rc = crtn_sem_v(sem);
    if (rc != 0) {
      fprintf(stderr, "crtn_sem_v(): error %d\n", crtn_errno());
      return -1;
    }

    if (c == EOF) {
      break;
    }

    crtn_yield(0);

  } while(1);

  return 0;

} // get_spaces

static int get_word(void *p)
{
  int c;
  size_t count;
  crtn_sem_t sem = *((crtn_sem_t *)p);
  int rc;

  do {

    rc = crtn_sem_p(sem);
    if (rc != 0) {
      fprintf(stderr, "crtn_sem_p(): error %d\n", crtn_errno());
      return -1;
    }

    count = cnts.nb_chars;
    c = read_buffer();
    while(!isspace(c) && (c != EOF)) {
      c = read_buffer();
    }
    unread_buffer(c);
    if (cnts.nb_chars > count) {
      cnts.nb_words ++;
    }

    rc = crtn_sem_v(sem);
    if (rc != 0) {
      fprintf(stderr, "crtn_sem_v(): error %d\n", crtn_errno());
      return -1;
    }

    if (c == EOF) {
      break;
    }

    crtn_yield(0);

  } while(1);

  return 0;

} // get_word


static int get_lines(void *p)
{
  crtn_sem_t sem = *((crtn_sem_t *)p);
  int c;
  int rc;

  do {

    rc = crtn_sem_p(sem);
    if (rc != 0) {
      fprintf(stderr, "crtn_sem_p(): error %d\n", crtn_errno());
      return -1;
    }

    c = read_buffer();
    while((c == '\n') && (c != EOF)) {
      cnts.nb_lines ++;
      c = read_buffer();
    }
    unread_buffer(c);

    rc = crtn_sem_v(sem);
    if (rc != 0) {
      fprintf(stderr, "crtn_sem_v(): error %d\n", crtn_errno());
      return -1;
    }

    if (c == EOF) {
      break;
    }

    crtn_yield(0);

  } while(1);

  return 0;

} // get_lines


int main(void)
{
  crtn_t cid_word, cid_spaces, cid_lines;
  int rc;
  int status;
  crtn_sem_t sem;

  rc = crtn_sem_new(&sem, 1);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  rc = crtn_spawn(&cid_word, "word", get_word, &sem, 0);
  if (rc != 0) {
    errno = crtn_errno();
    fprintf(stderr, "crtn_spawn(): error '%m' (%d)\n", errno);
    return 1;
  }

  rc = crtn_spawn(&cid_lines, "lines", get_lines, &sem, 0);
  if (rc != 0) {
    errno = crtn_errno();
    fprintf(stderr, "crtn_spawn(): error '%m' (%d)\n", errno);
    return 1;
  }

  rc = crtn_spawn(&cid_spaces, "space", get_spaces, &sem, 0);
  if (rc != 0) {
    errno = crtn_errno();
    fprintf(stderr, "crtn_spawn(): error '%m' (%d)\n", errno);
    return 1;
  }

  fill_buffer();

  rc = crtn_join(cid_word, &status);
  if (rc != 0) {
    errno = crtn_errno();
    fprintf(stderr, "crtn_join(): error '%m' (%d)\n", errno);
    return 1;
  }

  rc = crtn_join(cid_spaces, &status);
  if (rc != 0) {
    errno = crtn_errno();
    fprintf(stderr, "crtn_join(): error '%m' (%d)\n", errno);
    return 1;
  }

  rc = crtn_join(cid_lines, &status);
  if (rc != 0) {
    errno = crtn_errno();
    fprintf(stderr, "crtn_join(): error '%m' (%d)\n", errno);
    return 1;
  }

  rc = crtn_sem_delete(sem);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  printf("Lines: %zu / Words: %zu / Spaces: %zu / Characters: %zu\n"
         ,
         cnts.nb_lines, cnts.nb_words, cnts.nb_spaces, cnts.nb_chars
        );

  return status;

} // main
.sp

Example of execution:

.nf
$ cat /etc/passwd | mywc
Lines: 50 / Words: 91 / Spaces: 41 / Characters: 3017
$ cat /etc/passwd | wc
     50      91    3017
.sp

.SH AUTHOR
Rachid Koucha

.SH "SEE ALSO"
.BR crtn (3)
