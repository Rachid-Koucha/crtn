.TH CRTN 3  "FEBRUARY 2021" "API v@CRTN_VERSION@" "API v@CRTN_VERSION@"
.SH NAME
crtn_mbx \- Mailbox API of the CoRouTiNe service
.SH SYNOPSIS
.nf
\fB#include <crtn.h>\fP
.sp

.PP
.BI "int crtn_mbx_new(crtn_mbx_t *" mbx ");"
.BI "int crtn_mbx_delete(crtn_mbx_t " mbx ");"

.PP
.BI "int crtn_mbx_get(crtn_mbx_t " mbx ", void **" msg ");"
.BI "int crtn_mbx_tryget(crtn_mbx_t " mbx ", void **" msg ");"
.BI "int crtn_mbx_post(crtn_mbx_t " mbx ", void *" msg ");"

.PP
.BI "void *crtn_mbx_alloc(size_t " size ");"
.BI "void crtn_mbx_free(void *" msg ");"
.BI "void *crtn_mbx_format(char *" buffer ", size_t " buffer_size ", size_t *" data_size ");"

.fi
.SH DESCRIPTION

The
.B CRTN_MBX
API is a set of services to manage the mailbox for the message passing between the coroutines.

.PP
The
.BR crtn_mbx_new ()
function creates a mailbox. The identifier is returned in
.I mbx
parameter.

.PP
The
.BR crtn_mbx_delete ()
function deletes a mailbox with the
.I mbx
identifier.

.PP
The
.BR crtn_mbx_get ()
function peeks a message from the mailbox identified by
.IR mbx .
The message is returned in
.I msg
parameter. If the mailbox is empty, the calling coroutine is suspended until a message arrives.
An implicit yield operation is done to let any runnable standalone coroutine get the processor.

.PP
The
.BR crtn_mbx_tryget ()
function behaves the same as
.B crtn_mbx_get()
except that it returns if the mailbox is empty. This is typically used to
check if there are pending messages without suspending the calling coroutine if the mailbox is empty.

.PP
The
.BR crtn_mbx_post ()
function posts the message pointed by
.I msg
into the mailbox identified by
.BR mbx .
This makes runnable any coroutine waiting on the mailbox through the call to
.BR crtn_sem_p ().
The next call to
.BR crtn_yield ()
will resume them.


.PP
The
.BR crtn_mbx_alloc ()
function allocates a message suitable to be posted into a mailbox. The
.I size
parameter is the size of the data part of the message.

.PP
The
.BR crtn_mbx_free ()
function frees a message previously allocated by
.BR crtn_mbx_alloc ().

.PP
The
.BR crtn_mbx_format ()
function formats a user buffer of
.I buffer_size
bytes pointed by
.I buffer
into a message suitable to be posted into a mailbox. The  returned
.I data_size
is the size of the available data part which address is returned by the function. The address
is right after the internal header allocated in the input buffer.


.SH RETURN VALUE

.BR crtn_mbx_new (),
.BR crtn_mbx_delete (),
.BR crtn_mbx_get (),
.BR crtn_mbx_tryget ()
and
.BR crtn_mbx_post (),
return 0 on success; on error, \-1 is returned, and
.I errno
is set to indicate the error.

.BR crtn_mbx_alloc ()
returns the address of the allocated message on success; on error, 
.B NULL
is returned, and
.I errno
is set to indicate the error.

.BR crtn_mbx_format ()
returns the address of the data part of the formatted message on success; on error, 
.B NULL
is returned, and
.I errno
is set to indicate the error.

.SH ERRORS
The functions may set
.B errno
with the following values:
.TP
.B EINVAL
Invalid parameter

.TP
.B EAGAIN
returned by
.BR crtn_mbx_tryget ()
when the mailbox is empty

.TP
.B EAGAIN
returned by
.BR crtn_mbx_new ()
when there are no more contexts to create a mailbox


.SH EXAMPLES

In the following example, two standalone coroutines are spawned by the main coroutine. The sender coroutine posts 5 messages in a mailbox. After each post,
.BR crtn_yield (3)
is called. This resumes the receiver coroutine which receives the messages posted in the mailbox. After each reception,
.BR crtn_yield (3)
is called to resume the sender. The main coroutine merely waits for the termination of both coroutines calling
.BR crtn_join (3).

.nf
#include <stdio.h>
#include <crtn.h>

#define NB_MSG 5

#define MSG_SZ 100

static int sender(void *p)
{
  void *msg;
  int rc;
  crtn_mbx_t mbx = *((crtn_mbx_t *)p);
  int i;

  for (i = 0; i < NB_MSG; i ++) {

    msg = crtn_mbx_alloc(MSG_SZ);
    if (!msg) {
      fprintf(stderr, "Error %d\n", crtn_errno());
      return -1;
    }

    snprintf((char *)msg, MSG_SZ, "Message#%d", i);

    rc = crtn_mbx_post(mbx, msg);
    if (rc != 0) {
      fprintf(stderr, "Error %d\n", crtn_errno());
      return -1;
    }

    crtn_yield(0);
  }

  return i;
} // sender


static int receiver(void *p)
{
  void *msg;
  int rc;
  crtn_mbx_t mbx = *((crtn_mbx_t *)p);
  int i;

  for (i = 0; i < NB_MSG; i ++) {

    rc = crtn_mbx_get(mbx, &msg);
    if (rc != 0) {
      fprintf(stderr, "Error %d\n", crtn_errno());
      return -1;
    }

    printf("Received: '%s'\n", (char *)msg);

    rc = crtn_mbx_free(msg);
    if (rc != 0) {
      fprintf(stderr, "Error %d\n", crtn_errno());
      return -1;
    }

    crtn_yield(0);
  }

  return i;
} // receiver




int main(void)
{
  int rc;
  crtn_mbx_t mbx;
  crtn_t cid, cid1;
  int status, status1;

  rc = crtn_mbx_new(&mbx);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  rc = crtn_spawn(&cid, "Sender", sender, &mbx, 0);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  rc = crtn_spawn(&cid1, "Receiver", receiver, &mbx, 0);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  rc = crtn_join(cid, &status);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  rc = crtn_join(cid1, &status1);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  rc = crtn_mbx_delete(mbx);
  if (rc != 0) {
    fprintf(stderr, "Error %d\n", crtn_errno());
    return 1;
  }

  return 0;
}
.sp

The execution displays:

.nf
$ mbx 
Received: 'Message#0'
Received: 'Message#1'
Received: 'Message#2'
Received: 'Message#3'
Received: 'Message#4'
.sp

.SH AUTHOR
Rachid Koucha

.SH "SEE ALSO"

.BR crtn (7),
.BR crtn (3)
